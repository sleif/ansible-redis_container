---

- name: "gather info about the pod"
  containers.podman.podman_pod_info:
    name: "{{ pod_name }}"
  register: _pod_info
  when:
    - pod_name is defined
    - pod_name | length > 0
# - ansible.builtin.debug: var=_pod_info

- name: "create the pod"
  containers.podman.podman_pod:
    name: "{{ pod_name }}"
    publish: "{{ pod_published_ports | default(omit) }}"
  register: _pod_info
  when:
    - pod_name is defined
    - pod_name | length > 0
    - _pod_info.pods | length == 0

- name: "start Redis container"
  containers.podman.podman_container:
    name: "{{ redis_container_name }}"
    image: docker.io/redis:latest
    # hostname: "{{ redis_container_name }}"
    pod: "{{ pod_name | default(omit) }}"
    state: started
    restart_policy: always
    recreate: true
    # ports:
    #   - "6379:6379"
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
  register: _container_start_results
# - debug: var=_container_start_results

- name: "enable systemd service"
  ansible.builtin.service:
    name: "{{ (_container_start_results.podman_systemd | dict2items | list | first).key }}"
    enabled: true

# - name: whoami-Container starten
#   # test with 'curl -H "Host: whoami.wernigerode-brocken.de" whoami.wernigerode-brocken.de'
#   containers.podman.podman_container:
#     name: whoami
#     image: docker.io/jwilder/whoami
#     pod: "{{ pod_name | default(omit) }}"
#     state: started
#     restart_policy: always
#     recreate: true
#     env:
#       VIRTUAL_HOST: "mailcloud-ppd.sleif.de"
#       LETSENCRYPT_HOST: "mailcloud-ppd.sleif.de"
#       LETSENCRYPT_EMAIL: "misc1@sleif.de"
#       LETSENCRYPT_TEST: "true"
#     generate_systemd:
#       path: /etc/systemd/system/
#       restart_policy: always
#       # new: true
#   register: _container_start_results
# # - debug: var=_container_start_results

# - name: "enable systemd service"
#   ansible.builtin.service:
#     name: "{{ (_container_start_results.podman_systemd | dict2items | list | first).key }}"
#     enabled: true

    # pull: yes
    # networks:
    #   - name: "{{ DOCKER_NETWORK_NAME }}"
    #     aliases:
    #       - redis-container
    #       - "{{ redis_container_name }}"
    # networks_cli_compatible: yes

# - name: Start Redis container
#   community.general.docker_container:
#     name: "{{ redis_container_name }}"
#     image: redis
#     state: started
#     restart_policy: always
#     recreate: yes
#     pull: yes
#     networks:
#       - name: "{{ DOCKER_NETWORK_NAME }}"
#         aliases:
#           - redis-container
#           - "{{ redis_container_name }}"
#     networks_cli_compatible: yes
